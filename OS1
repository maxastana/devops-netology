Задача 1

   Какой системный вызов делает команда cd? В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, 
  поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. 
    В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте. Вам нужно найти тот единственный, который относится именно к cd. 
  Обратите внимание, что strace выдаёт результат своей работы в поток stderr, а не в stdout.
  
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ответ:

Cистемный вызов команды CD -> chdir("/tmp")

====================================================================================================================================================================

Задача 2

  Попробуйте использовать команду file на объекты разных типов на файловой системе. Например:
  vagrant@netology1:~$ file /dev/tty
  /dev/tty: character special (5/0)
  vagrant@netology1:~$ file /dev/sda
  /dev/sda: block special (8/0)
  vagrant@netology1:~$ file /bin/bash
  /bin/bash: ELF 64-bit LSB shared object, x86-64
  Используя strace выясните, где находится база данных file на основании которой она делает свои догадки.
  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ответ:

======================================================================================================================================================================
Задача 3

  Предположим, приложение пишет лог в текстовый файл. Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет. 
  Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается. 
  Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла (чтобы освободить место на файловой системе).
  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ответ: 
ps -aux смотрим PID 
lsof -p | grep delfile определяем номер дескриптора xxx удалённого файла
Перенаправляем поток с удаленного файла на вновь созданный файл
/proc/<PID>/fd/<xxx> > ../log
  
========================================================================================================================================================================
Задача 4
Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?
  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ответ:
  
"Зомби" процессы, в отличии от "сирот" освобождают свои ресурсы, но не освобождают запись в таблице процессов. 
  
========================================================================================================================================================================
Задача 5
  
В iovisor BCC есть утилита opensnoop:
  root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
  /usr/sbin/opensnoop-bpfcc
  На какие файлы вы увидели вызовы группы open за первую секунду работы утилиты? Воспользуйтесь пакетом bpfcc-tools для Ubuntu 20.04. Дополнительные сведения по установке.
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Ответ:
  
root@vagrant:/home/vagrant# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc
root@vagrant:/home/vagrant# /usr/sbin/opensnoop-bpfcc -d 1
PID    COMM               FD ERR PATH
616    irqbalance          6   0 /proc/interrupts
616    irqbalance          6   0 /proc/stat
616    irqbalance          6   0 /proc/irq/20/smp_affinity
616    irqbalance          6   0 /proc/irq/0/smp_affinity
616    irqbalance          6   0 /proc/irq/1/smp_affinity
616    irqbalance          6   0 /proc/irq/8/smp_affinity
616    irqbalance          6   0 /proc/irq/12/smp_affinity
616    irqbalance          6   0 /proc/irq/14/smp_affinity
616    irqbalance          6   0 /proc/irq/15/smp_affinity
807    vminfo              4   0 /var/run/utmp
610    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
610    dbus-daemon        18   0 /usr/share/dbus-1/system-services
root@vagrant:/home/vagrant#
  
============================================================================================================================================================================
  
Задача 6
    
Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, 
где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ответ:
  
Системный вызов uname()
Цитата :
     Part of the utsname information is also accessible  via  /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}.
===========================================================================================================================================================================
  
Задача 7
  
Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#
Есть ли смысл использовать в bash &&, если применить set -e?
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Ответ:
  
&& -  условный оператор
;  - разделитель последовательных команд
test -d /tmp/some_dir && echo Hi - в данном случае echo  отработает только при успешном заверщении команды test
set -e - прерывает сессию при любом ненулевом значении исполняемых команд в конвеере кроме последней.
в случае &&  вместе с set -e- вероятно не имеет смысла, так как при ошибке , выполнение команд прекратиться. 
  
===========================================================================================================================================================================
  
Задача 8
  
Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Ответ:
  
-e прерывает выполнение исполнения при ошибке любой команды кроме последней в последовательности 
-x вывод трейса простых команд 
-u неустановленные/не заданные параметры и переменные считаются как ошибки, с выводом в stderr текста ошибки и выполнит завершение неинтерактивного вызова
-o pipefail возвращает код возврата набора/последовательности команд, ненулевой при последней команды или 0 для успешного выполнения команд.
По сути, для сценария , повышает деталезацию вывода ошибок(логирования), 
и завершит сценарий при наличии ошибок, на любом этапе выполнения сценария, кроме последней завершающей команды
===========================================================================================================================================================================
  
Задача 9
  
Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. 
В man ps ознакомьтесь (/PROCESS STATE CODES) что значат дополнительные к основной заглавной буквы статуса процессов. 
Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Ответ:




